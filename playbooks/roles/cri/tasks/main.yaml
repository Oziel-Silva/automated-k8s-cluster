---
- name: Get stats of a file for containerd
  ansible.builtin.stat:
    path: /tmp/containerd.tar.gz
  register: st_containerd

- name: Get stats of a file for runc
  ansible.builtin.stat:
    path: /tmp/runc.amd64
  register: st_runc

- name: Get stats of a file for cni-plugins
  ansible.builtin.stat:
    path: /tmp/cni-plugins-linux.tgz
  register: st_cni_plugins

- name: Get binaries for install containerd
  ansible.builtin.get_url:
    url: https://github.com/containerd/containerd/releases/download/v1.6.9/containerd-1.6.9-linux-amd64.tar.gz
    dest: /tmp/containerd.tar.gz
  when: not st_containerd.stat.exists

- name: Get binaries for install runc
  ansible.builtin.get_url:
    url: https://github.com/opencontainers/runc/releases/download/v1.1.4/runc.amd64
    dest: /tmp/runc.amd64
  when: not st_runc.stat.exists

- name: Get binaries for install cni-plugins
  ansible.builtin.get_url:
    url: https://github.com/containernetworking/plugins/releases/download/v1.1.1/cni-plugins-linux-amd64-v1.1.1.tgz
    dest: /tmp/cni-plugins-linux.tgz
  when: not st_cni_plugins.stat.exists

- name: Install containerd
  ansible.builtin.shell:
    cmd: sudo tar Cxzvf /usr/local /tmp/containerd.tar.gz

- name: Create a directory for systemd
  ansible.builtin.file:
    path: /usr/local/lib/systemd/system
    state: directory
    mode: '0755'

- name: Get containerd.service
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/containerd/containerd/main/containerd.service 
    dest: /usr/local/lib/systemd/system

- name: Daemon-reload
  ansible.builtin.systemd:
    state: restarted
    daemon_reload: yes
    name: containerd

- name: Enable service containerd
  ansible.builtin.systemd:
    name: containerd
    enabled: yes
    masked: no

- name: Create a directory for cni
  ansible.builtin.file:
    path: /opt/cni/bin
    state: directory
    mode: '0755'

- name: Install cni
  ansible.builtin.shell:
    cmd: sudo tar Cxzvf /opt/cni/bin /tmp/cni-plugins-linux.tgz

- name: Install runc
  ansible.builtin.shell:
    cmd: sudo install -m 755 /tmp/runc.amd64 /usr/local/sbin/runc

- name: Config modules
  ansible.builtin.shell: |
    cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf overlay
    br_netfilter
    EOF

- name: Add modeprobe overlay
  community.general.modprobe:
    name: overlay
    state: present

- name: Add modeprobe br_netfilter
  community.general.modprobe:
    name: br_netfilter
    state: present

- name: sysctl params required by setup, params persist across reboots
  ansible.builtin.shell: |
    cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
    net.bridge.bridge-nf-call-iptables  = 1
    net.bridge.bridge-nf-call-ip6tables = 1
    net.ipv4.ip_forward                 = 1
    EOF

- name: Apply sysctl params without reboot
  ansible.builtin.shell:
    cmd: sudo sysctl --system


- name: Run the equivalent of "apt-get update" as a separate step
  ansible.builtin.apt:
    update_cache: yes

- name: Install a list of packages
  ansible.builtin.apt:
    pkg:
    - apt-transport-https
    - ca-certificates
    - curl

- name: Add gpg keys for k8s
  ansible.builtin.shell:
    cmd: sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg

- name: Add gpg keys for k8s
  ansible.builtin.shell:
    cmd: echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

- name: Run the equivalent of "apt-get update" as a separate step
  ansible.builtin.apt:
    update_cache: yes

- name: Install a list of packages
  ansible.builtin.apt:
    pkg:
    - kubelet
    - kubeadm
    - kubectl


- name: apt-mark hold kubelet kubeadm kubect
  ansible.builtin.shell:
    cmd: sudo apt-mark hold kubelet kubeadm kubectl
  